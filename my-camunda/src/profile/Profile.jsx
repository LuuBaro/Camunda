import React, { useState, useEffect } from "react";
import axios from "axios";
import "../profile/Profile.css";

const Profile = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const userId = localStorage.getItem("userId");

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`http://localhost:8080/api/orders/user/${userId}`);
      // ‚úÖ S·∫Øp x·∫øp ƒë∆°n h√†ng m·ªõi nh·∫•t l√™n ƒë·∫ßu
      setOrders(response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)));
    } catch (error) {
      console.error("L·ªói load ƒë∆°n h√†ng:", error);
      alert("C√≥ l·ªói khi load ƒë∆°n h√†ng.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (userId) {
      fetchOrders();
    }
  }, [userId]);

  const handleCancelOrder = async (orderId, taskId) => {
    try {
      await axios.put("http://localhost:8080/api/orders/cancel-order", null, { params: { orderId, taskId } });
      alert("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy!");
      fetchOrders();
    } catch (error) {
      console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);
      alert("‚ùå C√≥ l·ªói khi h·ªßy ƒë∆°n h√†ng.");
    }
  };

  const handleDeleteOrder = async (orderId, taskId) => {
    try {
      await axios.put("http://localhost:8080/api/orders/delete-order", null, { params: { orderId, taskId } });
      alert("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a!");
      fetchOrders();
    } catch (error) {
      console.error("L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
      alert("‚ùå C√≥ l·ªói khi x√≥a ƒë∆°n h√†ng.");
    }
  };

  // ‚úÖ Bi√™n d·ªãch tr·∫°ng th√°i sang ti·∫øng Vi·ªát & th√™m m√†u s·∫Øc
  const getStatusText = (status) => {
    const statusMap = {
      PENDING: { text: "Ch·ªù x√°c nh·∫≠n", color: "orange" },
      APPROVED: { text: "B·∫Øt ƒë·∫ßu giao h√†ng", color: "green" },
      REJECTED: { text: "B·ªã t·ª´ ch·ªëi", color: "red" },
      CANCELED: { text: "ƒê√£ h·ªßy", color: "gray" },
      DELETED: { text: "ƒê√£ x√≥a", color: "black" },
      APPROVING: { text: "ƒêang x√©t duy·ªát", color: "blue" },
      INSTOCK: { text: "C√≥ h√†ng", color: "green" },
      OUTSTOCK: { text: "H·∫øt h√†ng", color: "red" },
      COMPLETED: { text: "Ho√†n th√†nh", color: "green" }
    };
    return statusMap[status] || { text: status, color: "black" };
  };

  return (
    <div className="profile-container">
      <h3>üì¶ ƒê∆°n h√†ng c·ªßa b·∫°n</h3>
      {loading ? (
        <p>üîÑ ƒêang t·∫£i...</p>
      ) : orders.length > 0 ? (
        <table className="orders-table">
          <thead>
            <tr>
              <th>M√£ ƒë∆°n h√†ng</th>
              <th>Tr·∫°ng th√°i</th>
              <th>T·ªïng ti·ªÅn</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order) => {
              const { text, color } = getStatusText(order.status);
              return (
                <tr key={order.id}>
                  <td>{order.id}</td>
                  <td style={{ color, fontWeight: "bold" }}>{text}</td>
                  <td>{order.totalAmount.toLocaleString()} VND</td>
                  <td>
                    {order.status === "PENDING" && (
                      <button className="cancel-button" onClick={() => handleCancelOrder(order.id, order.taskId)}>
                        ‚ùå H·ªßy ƒë∆°n
                      </button>
                    )}
                    {order.status === "CANCELED" && (
                      <button className="delete-button" onClick={() => handleDeleteOrder(order.id, order.taskId)}>
                        üóëÔ∏è X√≥a ƒë∆°n
                      </button>
                    )}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      ) : (
        <p>‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>
      )}
    </div>
  );
};

export default Profile;
